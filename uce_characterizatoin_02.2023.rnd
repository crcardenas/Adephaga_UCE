---
title: "Data Analysis of UCE intersects"
author: "Cody Raul Cardenas"
date: '02.2023'
output:
  pdf_document: default
  html_document:
    df_print: paged
---

We need to import the intersect data from our data. Here is what our data looks like:

* Scaffold: the scaffold or chromosome queery matched too
* qstart: query start
* qend: query endsw
* type: genomic feature type
* seqname: scaffold or chromosome of reference
* seqtart: reference feature start
* seqerence: reference feature end
* attribute: if exonic, exonic feature given. Mainly concerned about transcript ID here.

```
scaffold    qstart    qend    query   type    seqname    seqstart   seqend  attribute
---
1	39310	39334	uce-127282_p11	60	+	intron	1	39281	39334
1	39334	39419	uce-127282_p11	60	+	exon	1	ensembl	exon	39335	39463	.	+	.	Parent=transcript:ENSMPTT00005003008;constitutive=0;exon_id=ENSMPTE00005013128;rank=8;version=1
1	39334	39419	uce-127282_p11	60	+	exon	1	ensembl	exon	39335	39463	.	+	.	Parent=transcript:ENSMPTT00005003000;constitutive=0;exon_id=ENSMPTE00005013128;rank=8;version=1
1	39339	39459	uce-127282_p12	60	+	exon	1	ensembl	exon	39335	39463	.	+	.	Parent=transcript:ENSMPTT00005003008;constitutive=0;exon_id=ENSMPTE00005013128;rank=8;version=1
1	39339	39459	uce-127282_p12	60	+	exon	1	ensembl	exon	39335	39463	.	+	.	Parent=transcript:ENSMPTT00005003000;constitutive=0;exon_id=ENSMPTE00005013128;rank=8;version=1
...
```

(how intersect was created can be found here: https://github.com/crcardenas/Adephaga_UCE/blob/main/workflow.md)

### Load Library
```{r,message=FALSE}
library(tidyr) # data clean up
library(dplyr) # data cleanup
library(readr) # for importing
library(ggplot2) # for plotting 
library(scales) # additional package for plotting
library(ggtext) # additional package for plotting
#library(psych) # for statistics, if necessary
# library(GenomicFeatures) # my not actually need this since we are doing our own thing
```

### Load data
We have two files because of different GFF attribute fields for genes and exons. These can be joined later for manipulation, but may not need to be.
There is no header information so we will need to add the header info I described above

```{r}
d.intro_exon <- read_tsv(file="../Adephaga2.9-pterMadi2.introns-exons.out.intersect", col_names = F, na = c("","NA"))
d.inter_gene <- read_tsv(file="../Adephaga2.9-pterMadi2.intergenic-genentic.out.intersect", col_names = F, na = c("","NA"))
colnames(d.intro_exon) <- c("scaffold","qstart","qend","query","type","seqname","seqstart","seqend","attribute")
colnames(d.inter_gene) <- c("scaffold","qstart","qend","query","type","seqname","seqstart","seqend","attribute")
d.intro_exon
d.inter_gene
```


### add new columns for each file

1) split out query column, one for UCE and one for UCE probe (UCE#_p##)
  - query
  - uce
  - uce_probe
2) split out GFF attribute column if present:
  - attribute
  - transcript
  - exon-id
  
```{r}
df.intro_exon <- d.intro_exon %>% separate_wider_delim(cols = query, 
                           delim = "_", 
                           names = c("uce","probe")) %>% 
  separate_wider_delim(cols = attribute, 
                       delim = ";",
                       names = c("parent","constitutive","ID","rank","version")) %>% 
  separate_wider_delim(cols = parent,
                       delim = ":",
                       names = c("parent","transcript")) %>% 
  separate_wider_delim(cols = ID,
                       delim = "=", 
                       names = c("gff_attribute","exon_id")) %>% 
  mutate(query=paste(uce,probe, sep="_")) %>% 
  select(scaffold, qstart, qend, query, uce, probe, type, seqname, seqstart, seqend, transcript, exon_id)
df.intro_exon
```


```{r}
df.inter_gene <- d.inter_gene %>% separate_wider_delim(cols = query, 
                           delim = "_", 
                           names = c("uce","probe")) %>% 
  separate_wider_delim(cols = attribute, 
                       delim = ";",
                       names = c("ID","biotype","geneID","version")) %>% 
  separate_wider_delim(cols = biotype,
                       delim = "=",
                       names = c("gff_attribute1","biotype")) %>% 
  separate_wider_delim(cols = ID,
                       delim = ":",
                       names = c("gff_attribute2","gene_id")) %>% 
  mutate(query=paste(uce,probe, sep="_")) %>% 
  select(scaffold, qstart, qend, query, uce, probe, type, seqname, seqstart, seqend, biotype, gene_id)
df.inter_gene
```

---

## Summary

UCEs that map to exons

```{r}
# df.intro_exon %>% distinct(uce, .keep_all = T) %>%  count(type) 
# 
# #uce_by_exon <- df.intro_exon %>% distinct(uce, .keep_all = T) %>%  group_by(exon_id) %>% summarize(uce_count = sum(uce >= 1)) 
# 
# uce_by_exon2 <- uce_by_exon %>% filter(uce_count > 1) %>% na.omit()
# 
# psych::describe(uce_by_exon2)

```


```{r}
# df.inter_gene %>% distinct(uce, .keep_all = T) %>%  count(type)
# 
# uce_count_by_gene <- df.inter_gene %>% distinct(uce, .keep_all = T) %>%  group_by(gene_id) %>% summarize(uce_count = sum(uce >= 1))
# 
# uce_count_by_gene2 <- uce_count_by_gene %>% filter(uce_count > 1) %>% na.omit() # na.omit gets rid of the intergenic UCEs (all 769 of them)
# 
# psych::describe(na.omit(uce_count_by_gene$uce_count)) # includes the 769 loci coming from the intergenic regions
# psych::describe(na.omit(uce_count_by_gene2$uce_count))
```

### Genetic & intergenic

we need to make one more category that best characterizes as genetic, intergenic, or both
```
  scaffold  qstart    qend query         uce        probe type       seqname seqstart  seqend biotype        gene_id           
  <chr>      <dbl>   <dbl> <chr>         <chr>      <chr> <chr>      <chr>      <dbl>   <dbl> <chr>          <chr>             
1 1        1011217 1011282 uce-71245_p7  uce-71245  p7    gene       1         982581 1011637 protein_coding ENSMPTG00005003053
2 1        1011217 1011329 uce-71245_p8  uce-71245  p8    gene       1         982581 1011637 protein_coding ENSMPTG00005003053
3 1        1018428 1018429 uce-267689_p7 uce-267689 p7    intergenic 1        1011637 1018429 NA             NA                
4 1        1018429 1018545 uce-267689_p7 uce-267689 p7    gene       1        1018430 1035525 protein_coding ENSMPTG00005001153
```
see second UCE here, it is both intergenic and genetic... these are the only variables we are worried about right now.

1) first group by UCEs
2) then create a new column called category with mutate
  * if the type column has more than one distinct type (e.g., both intergenic and genetic) give the column "intergenic_genetic"
3) ungroup the UCEs
4) now that we have this new category, we can use distinct to get the counts of the UCE features

```{r}
category.inter_gene <- df.inter_gene %>%  
  group_by(uce) %>% 
  mutate(category = if (n_distinct(type) > 1) 'intergenic_genetic' else unique(type)) %>%
  ungroup() %>% 
  select(scaffold, uce, probe, type, category)
category.inter_gene.all <- category.inter_gene %>% distinct(uce, .keep_all = T) %>% select(category) %>% table() %>% as_tibble()
category.inter_gene.all
category.inter_gene.bychromosome <- category.inter_gene %>% group_by(scaffold) %>% distinct(uce, .keep_all = T) %>% select(category) %>% table()

category.inter_gene.bychromosome
```


```{r}
#create our dataframe
category.df.inter_gene.all <- data.frame(
  genomic_feature= category.inter_gene.all$.,
  uce_count = category.inter_gene.all$n) %>% 
  mutate( proportion = round(uce_count / sum(uce_count), 4))
category.df.inter_gene.all
# create a pie chart
pb.category.inter_gene.all <- category.df.inter_gene.all %>% 
  ggplot(aes(x="", y=proportion, fill=reorder(genomic_feature,proportion))) +
  geom_bar(width = 1, stat = "identity") +
  coord_polar("y", start = 0) +
  scale_fill_grey() +
  theme(axis.title.y = element_blank(),
         axis.title.x = element_blank(),
         panel.border = element_blank(),
         panel.grid = element_blank(),
         axis.ticks = element_blank(),
         axis.text.x = element_blank(),
         panel.background = element_blank(),
         plot.title = element_text(hjust=0.5)) +
  geom_text(aes(label = percent(proportion, accuracy = 0.01), fontface=2),
            position = position_stack(vjust=0.5)) +
  ggtitle("UCE characterized as genetic or intergenic") +
  labs(fill="Genomic feature") +
  guides(fill=guide_legend(reverse=T))
pb.category.inter_gene.all

```

## UCEs that map to gene features

```{r}
# df.intro_exon %>% distinct(uce, .keep_all = T) %>%  count(type) 
# 
# #uce_by_exon <- df.intro_exon %>% distinct(uce, .keep_all = T) %>%  group_by(exon_id) %>% summarize(uce_count = sum(uce >= 1)) 
# 
# uce_by_exon2 <- uce_by_exon %>% filter(uce_count > 1) %>% na.omit()
# 
# psych::describe(uce_by_exon2)

```

```{r}
category.intro_exon <- df.intro_exon %>%
  group_by(uce) %>%
  mutate(category = if (n_distinct(type) > 1) 'intron_exon' else unique(type)) %>%
  ungroup() %>%
  select(scaffold, uce, probe, type, category)
category.intro_exon.all <- category.intro_exon %>% distinct(uce, .keep_all = T) %>% select(category) %>% table() %>% as_tibble()
category.intro_exon.all
category.intro_exon.bychromosome <- category.intro_exon %>% group_by(scaffold) %>% distinct(uce, .keep_all = T) %>% select(category) %>% table()

category.intro_exon.bychromosome
```

```{r}
#create our dataframe
category.df.intro_exon.all <- data.frame(
  genomic_feature= category.intro_exon.all$.,
  uce_count = category.intro_exon.all$n) %>%
  mutate( proportion = round(uce_count / sum(uce_count), 4)) %>% 
  arrange(desc(proportion))
category.df.intro_exon.all
# create a pie chart
pb.category.intro_exon.all <- category.df.intro_exon.all %>% 
  ggplot(aes(x="", y=proportion, fill=reorder(genomic_feature,uce_count))) +
  geom_bar(width = 1, stat = "identity") +
  coord_polar("y", start = 0) +
  scale_fill_grey() +
  theme(axis.title.y = element_blank(),
         axis.title.x = element_blank(),
         panel.border = element_blank(),
         panel.grid = element_blank(),
         axis.ticks = element_blank(),
         axis.text.x = element_blank(),
         panel.background = element_blank(),
         plot.title = element_text(hjust=0.5)) +
  geom_text(aes(label = percent(proportion, accuracy = 0.01), fontface=2),
            position = position_stack(vjust=0.5)) +
  ggtitle("Genetic UCEs characterized as intron or exon")  +
  labs(fill="Gene feature") +
  guides(fill=guide_legend(reverse=T))
pb.category.intro_exon.all
```


## multi-UCE genes

next we need to characterize the number of UCEs per gene. Here is an example from the df.inter_gene with three different UCEs mapping to the same gene

```
scaffold   qstart     qend query          uce        probe type  seqname seqstart   seqend biotype        gene_id          
X        35120719 35120839 uce-123899_p11 uce-123899 p11   gene  X       35120216 35135278 protein_coding ENSMPTG00005012093
X        35120759 35120879 uce-123899_p12 uce-123899 p12   gene  X       35120216 35135278 protein_coding ENSMPTG00005012093
X        35129993 35130087 uce-17802_p12  uce-17802  p12   gene  X       35120216 35135278 protein_coding ENSMPTG00005012093
X        35130007 35130127 uce-17802_p11  uce-17802  p11   gene  X       35120216 35135278 protein_coding ENSMPTG00005012093
X        35131551 35131671 uce-123823_p12 uce-123823 p12   gene  X       35120216 35135278 protein_coding ENSMPTG00005012093
X        35131591 35131711 uce-123823_p11 uce-123823 p11   gene  X       35120216 35135278 protein_coding ENSMPTG00005012093
```

```{r, warning=FALSE}
category.gene_uce <- df.inter_gene %>%
  group_by(gene_id) %>%
  mutate(gene_id = 
           if (type == 'intergenic') 'intergenic' else gene_id) %>% # ignoring warning for now
  mutate(uce_count = 
           case_when(
             n_distinct(uce) == 1 ~ 'n=1',
             n_distinct(uce) == 2 ~ 'n=2',
             n_distinct(uce) == 3 ~ 'n=3',
             n_distinct(uce) == 4 ~ 'n=4',
             n_distinct(uce) == 5 ~ 'n=5')) %>%
  ungroup() %>%
  select(scaffold, uce, probe, type, gene_id, uce_count)
category.gene_uce
category.gene_uce.all <- category.gene_uce %>% distinct(gene_id, .keep_all = T) %>% select(uce_count) %>% table() %>% as_tibble()
category.gene_uce.all
category.gene_uce.bychromosome <- category.gene_uce %>% group_by(scaffold) %>% distinct(gene_id, .keep_all = T) %>% select(uce_count) %>% table()
category.gene_uce.bychromosome
```
Next we create a data frame and plot our results, only plot N > 1 UCEs per gene

```{r}
# create our data frame from our object class table
category.df.gene_uce.all <- data.frame(
  uce_per_gene = category.gene_uce.all$.,
  genes_total = category.gene_uce.all$n) %>% 
  filter(uce_per_gene!='n=1')
category.df.gene_uce.all

# create barplot
bp.gene_uce.all <- category.df.gene_uce.all %>%  
  ggplot(aes(x=uce_per_gene,y=genes_total)) +
  geom_bar(stat="identity") +
  annotate("text",x=3.5, y=150,
           label=
"genetic UCEs: 1863\nintergenic UCEs: 710\nintergenic & genetic UCEs: 131 *\n
genes with >=1 UCEs: 1698\nexonic UCEs: 1141\nintronic & exonic UCEs 766 *\nintronic UCEs: 108") +
  geom_text( aes(label=genes_total), vjust=-1) +
  scale_y_continuous(limits=c(0,225)) +
  labs(x="UCE per gene",
       y="total genes",
       title= expression("Adephaga 2.9k UCEs within *Pterostichus madidus* genes")) +
  theme_bw() +
  theme(plot.title = ggtext::element_markdown())
bp.gene_uce.all
```

Something is off in the counting, things arent adding up.
I've identified 1698 genes, with one or more UCE (e.g., 219 with 2, 48 with 3, etc.)
BUT the cumulative of all identfied exonic, intronic & exonic, and intronic UCEs is 
greater.

The total number of mapped UCEs is 2704, which tracks with the genetic/intergenic calculations.
However, something is being counted wrong (or my interpretation of the counting is way off).
1698 genes with 1 or more UCEs mapped to them.... but when I count specific gene features (gff, intronict, or both) the sum is much greater.
For example, 219 genes have two (438 UCEs), 48 genes have three (144), eight genes have four (32), and three have five (15); for a total of 629 multi-genic UCEs.
There are 1420 genes with one UCE, plus the other genes = 1698 genes. cool cool cool.
there are 629 + 1420 = 2049 genic UCEs. But this summatoin does not equal the 1863 genetic UCEs identified previously calculated (even including 131 both intergenic and genetic uces: 1994)

these calculations are all so off some how. 


```{r}
# uces_in_genes <- uce_count_by_gene2 %>% ggplot(aes(x=uce_count)) +
#   geom_bar(stat="count") +
#     annotate("text",
#            x=4.5, y=150,
#            label="intergenic UCEs: 770\ngenes with UCEs: 1934\n>1 UCE per gene: 257\nUCEs in exons: 1420\nUCEs in introns: 595") +
#   geom_text(stat= 'count',
#             aes(label=..count..),
#             vjust=-1) +
#   scale_y_continuous(limits=c(0,225)) +
# #  theme_update(plot.title = element_text(hjust = 0.5)) +
#   labs(x="UCE per gene",
#        y="total genes",
#        title= expression("Adephaga 2.9k UCEs present in *Pterostichus madidus* genome")) +
#   theme_bw() +
#   theme(plot.title = ggtext::element_markdown())
# uces_in_genes
```

Trying to solve the counting issue. genes w/ UCE

---

```{r}
sessionInfo()
```

